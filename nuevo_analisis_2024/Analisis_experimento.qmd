---
title: "Experimento"
format: html
editor: visual
---

## Analisis de experimento aula 27 contra virtual

Este es un documento para mostrar el analisis del experimento aula 27 contra virtual

```{r dependencies, include=FALSE}

library(tidyverse)
library(Routliers)
library(lme4)
library(nlme)
library(sjPlot)
library(MuMIn)
library(lmerTest)
library(jtools)
library(gdtools)
library(broom)
library(ggstatsplot)
library(modelsummary)
library(ggpubr)
library(flextable)
library(webshot)
library(officer)
library(effects)
library(rstatix)
library(broom)
library(broom.mixed)
```

## Curva de distancia y resultados estadisticos del modelo

```{r load_data, include=FALSE}

results_tbl <- read.csv("../ResultsData/Dresults.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)

cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
```

```{r make_model, include=FALSE}
# Primero INTRA SUJETOS
# Primer modelo
m.Dist1 <-  lmer(log10(perc_dist) ~ log10(target_distance)*room_condition+(1+log10(target_distance)|subject)+(0+room_condition|subject),
                 data = results_tbl) 


extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)

anova(m.Dist1)
#anov1 = anova(m.Dist1)

results_tbl$Modelfitted1<-predict(m.Dist1)

# Todos los sujetos
FittedlmPlot1 <-ggplot()+
  facet_grid(subject ~ room_condition, labeller=label_both)+
  geom_line(data = results_tbl, aes(x = target_distance, y = 10^Modelfitted1))+
  geom_point(data = results_tbl, aes(x = target_distance, y =perc_dist, group=subject,colour = subject), size=3)+
  #  coord_cartesian(ylim = c(.03,.074))+ 
  xlab("Targent_distance")+ylab("Perceived_distance")
#FittedlmPlot1


Final.Fixed<-effect(c("log10(target_distance)*room_condition"), m.Dist1)

# Grafico poblacional
Final.Fixed<-as.data.frame(Final.Fixed)

Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =10^fit, group=room_condition))+
  # coord_cartesian(xlim=c(0,4),ylim = c(0,.7))+ 
  geom_line(aes(color=room_condition), size=2)+
  geom_ribbon(aes(ymin=10^fit-10^se, ymax=10^fit+10^se,fill=room_condition),alpha=.2)+
  xlab("Target_distance")+
  ylab("Perceived_distance")+
  # scale_color_manual(values=c("blue", "red"))+
  # scale_fill_manual(values=c("blue", "red"))+
  theme_bw()+
  theme(text=element_text(face="bold", size=12),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_rect(fill = NA, colour = "NA"),
        axis.line = element_line(size = 1, colour = "grey80"),
        legend.title=element_blank(),
        legend.position = c(.2, .92))
#Final.Fixed.Plot

mDist1stats <- extract_stats(ggcoefstats(m.Dist1))
```

```{r output_model, include=FALSE, echo=FALSE}
mDist1stats$tidy_data
anova(m.Dist1)
r.squaredGLMM(m.Dist1)

eq1 <- substitute("Controlled environment:" ~~~ italic(y) == k %.% italic(X)^italic(a),
                  list(k = round(10^mDist1stats$tidy_data$estimate[[1]],digits = 2),
                       a = round(mDist1stats$tidy_data$estimate[[2]], digits = 2)))
eq2 <- substitute("Unknown environment:"~~~italic(y) == k %.% italic(X)^italic(a),
                  list(k = round(10^(mDist1stats$tidy_data$estimate[[1]]+mDist1stats$tidy_data$estimate[[3]]), digits = 2),
                       a = round(mDist1stats$tidy_data$estimate[[2]]+mDist1stats$tidy_data$estimate[[4]], digits = 2)))
#eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
#                  list(b = round(r.squaredGLMM(m.Dist1)[2], digits = 2)))
eq1

results_tbl <- results_tbl %>%
  mutate(
    perc_dist_log_10 = log10(perc_dist)
  )

tabla.pob <- results_tbl %>% group_by(target_distance,room_condition) %>%
  summarise(Mperc_dist  = mean(perc_dist_log_10),
            SDperc_dist = sd(perc_dist_log_10)/sqrt(n()))  %>%
  ungroup()
```

```{r model_figure, echo=FALSE}
f1 <- ggplot(tabla.pob, aes(x=target_distance, y =10^Mperc_dist, group = room_condition, color  = room_condition)) +
  geom_pointrange(aes(x = target_distance, y = 10^Mperc_dist, ymin = 10^(Mperc_dist-SDperc_dist), ymax = 10^(Mperc_dist+SDperc_dist)),alpha = 1,
                  position = position_jitterdodge(jitter.width = .1,
                                                  jitter.height = 0,
                                                  dodge.width = .1 ))+
  geom_abline(intercept = 0, slope = 1, linetype=2) +
  scale_colour_manual(values = cbPalette) +
  scale_fill_manual(values = cbPalette) +
  geom_line(data = Final.Fixed, aes(x = target_distance, y =10^fit, group=room_condition, color=room_condition))+
  geom_text(x = 0.2, y = 8.0, label = as.character(as.expression(eq1)), 
            hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000",
            family="Times New Roman")+
  geom_text(x = 0.2, y = 7.0, label = as.character(as.expression(eq2)), 
            hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00",
            family="Times New Roman")+
  #geom_text(x = 0.2, y = 6.0, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
  scale_x_continuous(name="Distance source (m)", limits = c(0,10)) +
  scale_y_continuous(name="Perceived distance (m)",   limits = c(0,10)) +
  theme_pubr(base_size = 12, margin = TRUE)+
  theme(legend.position = "top",
        legend.title = element_blank(),
        text=element_text(family="Times New Roman", size=10)) 


f1
```

```{r print_model, echo=FALSE}
results <- mDist1stats$tidy_data
```

Los resultados del modelo son

| Que es                  | Estimate | CI95 low |  CI95 high   |
|-------------------------|------|------|-----|
| Intercept Aula 27 (controlled env)| `r 10^results$estimate[1]` |  `r 10^results$conf.low[1]`    |    `r 10^results$conf.high[1]` |
| Slope Aula 27 (controlled env) | `r results$estimate[2]` |  `r results$conf.low[2]`    |    `r results$conf.high[2]` |
| Intercept internet (uknown env)|  `r 10^(results$estimate[1] + results$estimate[3])`    |  `r 10^(results$conf.low[1] + results$conf.low[3])`    |  `r 10^(results$conf.high[1] +results$conf.high[3])`   |
|  Slope internet (uknown env)|  `r results$estimate[2] + results$estimate[4]`    |  `r results$conf.low[2] + results$conf.low[4]`    |  `r results$conf.high[2] + results$conf.high[4]`   |


## Bias

### Signed bias

```{r bias_load, include=FALSE}
results_tbls <- results_tbl %>% 
  group_by(room_condition,subject) %>%
  summarise(mBiasSigned  = mean(rel_bias_signed,na.rm=TRUE),
            SdBiasSigned  = sd(rel_bias_signed,na.rm=TRUE)/sqrt(length(rel_bias_signed)),
            mBiasUnSigned  = mean(rel_bias_unsigned,na.rm=TRUE),
            SdBiasUnSigned  = sd(rel_bias_unsigned,na.rm=TRUE)/sqrt(length(rel_bias_unsigned)))  %>%
  ungroup()

results_tblp <- results_tbls %>% 
  group_by(room_condition) %>%
  summarise(MBiasSigned  = mean(mBiasSigned,na.rm=TRUE),
            SDBiasSigned  = sd(mBiasSigned,na.rm=TRUE)/sqrt(length(mBiasSigned)),
            MBiasUnSigned  = mean(mBiasUnSigned,na.rm=TRUE),
            SDBiasUnSigned  = sd(mBiasUnSigned,na.rm=TRUE)/sqrt(length(mBiasUnSigned)))  %>%
  ungroup()
# geom_flat_violin(aes(fill = Condicion),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
#   geom_point(aes(x = as.numeric(Tiempo)-.15, y = LeqAS, colour = Condicion),position = position_jitter(width = .05, height = 0), size = 1, shape = 20)+
```

```{r signed_bias_figure, echo=FALSE, warning=FALSE}
f6 <-  ggplot(results_tblp, aes(x = room_condition,y = MBiasSigned, colour = room_condition, fill = room_condition)) +
  geom_pointrange(aes(x=room_condition, y=MBiasSigned, ymin=MBiasSigned-SDBiasSigned, ymax=MBiasSigned+SDBiasSigned), size = 0.5)+
  geom_line(aes(group = 1),size = 1.2, alpha=.5)+
  geom_point(data = results_tbls, mapping = aes(x = room_condition,y = mBiasSigned, colour = room_condition, fill = room_condition), alpha = 0.3)+
  geom_line(data = results_tbls, mapping = aes(x = room_condition,y = mBiasSigned, group = subject, colour = room_condition),alpha = 0.3)+
  geom_violin(data= results_tbls,aes(x = room_condition,y = mBiasSigned), trim=TRUE, alpha=0)+
  scale_colour_manual(values = cbPalette) + 
  scale_fill_manual(values = cbPalette) + 
  geom_abline(slope = 0,
              intercept = 0,
              alpha = 0.5,
              linetype = "dashed") +
  labs(x = "Condition", 
       y = "Relative signed \nbias") +
  # facet_grid(. ~ type) +
  #annotate("text", x = 1.5, y = 0.3,  label = "*", size = 4) +
  #annotate("segment", x = 1, xend = 2, y = 0.2, yend = 0.2, colour = "black", size=.5, alpha=1,)+
  theme_pubr(base_size = 12, margin = TRUE)+
  theme(legend.position = "none",
        axis.title.x = element_blank(),
        axis.text.x = element_blank())

f6
```

```{r signed_bias_model, include=FALSE}
m.RelativeBias <- lm(mBiasSigned ~ room_condition, 
                    data = results_tbls)
stats.RelativeBias = extract_stats(ggcoefstats(m.RelativeBias))
#1 (Intercept)                        -0.509
# room_conditionVisual information    0.151 

anov = anova(m.RelativeBias)

```

El modelo comparando

|Cond | estimate | conf95 low| conf95 high|
|--|--|--|--|
|Known env| `r stats.RelativeBias$tidy_data$estimate[1]`  | `r stats.RelativeBias$tidy_data$conf.low[1]`  | `r stats.RelativeBias$tidy_data$conf.high[1]` |
|UnKnown env| `r stats.RelativeBias$tidy_data$estimate[1] + stats.RelativeBias$tidy_data$estimate[2]`  | `r stats.RelativeBias$tidy_data$conf.low[1] + stats.RelativeBias$tidy_data$conf.low[2]`  | `r stats.RelativeBias$tidy_data$conf.high[1] + stats.RelativeBias$tidy_data$conf.high[2]` |

Anova del modelo de arriba
```{r signed_bias_model_anova, echo=FALSE}
anov
```

#### Post hoc t-test
```{r ad_hoc_t_test, include=FALSE}
testSigendBias <- t.test(filter(results_tbls, 
                                room_condition=="Controlled environment" )$mBiasSigned,
                         filter(results_tbls, 
                                room_condition=="Unknown environment")$mBiasSigned, 
                         paired = FALSE)

```

```{r ad_hoc_t_test_print, echo=FALSE}

testSigendBias

```

### Unsigned bias

```{r unsigned_bias_figure, echo=FALSE, warning=FALSE}

f7 =  ggplot(results_tblp, aes(x = room_condition,y = MBiasUnSigned, colour = room_condition, fill = room_condition)) +
  geom_pointrange(aes(x=room_condition, y=MBiasUnSigned, ymin=MBiasUnSigned-SDBiasUnSigned, ymax=MBiasUnSigned+SDBiasUnSigned), size = 0.5)+
  geom_point(data = results_tbls, mapping = aes(x = room_condition,y = mBiasUnSigned, colour = room_condition, fill = room_condition), alpha = .3)+
  geom_line(aes(group = 1),size = 1.2, alpha=.5)+
  geom_line(data = results_tbls, mapping = aes(x = room_condition,y = mBiasUnSigned, group = subject, colour = room_condition),alpha = 0.3)+
  geom_violin(data= results_tbls,aes(x = room_condition,y = mBiasUnSigned), trim=TRUE, alpha=0)+
  scale_colour_manual(values = cbPalette) + 
  scale_fill_manual(values = cbPalette) + 
  geom_abline(slope = 0,
              intercept = 0,
              alpha = 0.5,
              linetype = "dashed") +
  labs(x = "Condition", 
       y = "Relative unsigned \nbias") +
  # facet_grid(. ~ type) +
  #annotate("text", x = 1.5, y = 1.1,  label = "**", size = 4) +
  #annotate("segment", x = 1, xend = 2, y = 1.0, yend = 1.0, colour = "black", size=.5, alpha=1,)+
  theme_pubr(base_size = 12, margin = TRUE)+
  theme(legend.position = "none",
        axis.title.x = element_blank(),
        axis.text.x = element_blank())

f7
```

```{r unsigned_bias_model, echo=FALSE}
m.RelativUnsignedBias <- lm(mBiasUnSigned ~ room_condition, 
                            data = results_tbls)
stats.RelativeUnsignedBias = extract_stats(ggcoefstats(m.RelativUnsignedBias))
anov = anova(m.RelativUnsignedBias)
```

El modelo comparando

|Cond | estimate | conf95 low| conf95 high|
|--|--|--|--|
|Known env| `r stats.RelativeUnsignedBias$tidy_data$estimate[1]`  | `r stats.RelativeUnsignedBias$tidy_data$conf.low[1]`  | `r stats.RelativeUnsignedBias$tidy_data$conf.high[1]` |
|UnKnown env| `r stats.RelativeUnsignedBias$tidy_data$estimate[1] + stats.RelativeUnsignedBias$tidy_data$estimate[2]`  | `r stats.RelativeUnsignedBias$tidy_data$conf.low[1] + stats.RelativeUnsignedBias$tidy_data$conf.low[2]`  | `r stats.RelativeUnsignedBias$tidy_data$conf.high[1] + stats.RelativeUnsignedBias$tidy_data$conf.high[2]` |

```{r unsigned_bias_model_anova, echo=FALSE}
anov
```

#### Post hoc t - test

```{r unsigned_bias_post_hoc_t_test, echo=FALSE}

t.test(filter(results_tbls, 
              room_condition=="Controlled environment" )$mBiasUnSigned,
       filter(results_tbls, 
              room_condition=="Unknown environment")$mBiasUnSigned, 
       paired = FALSE)

```

### Main figure
```{r main_figure, echo=FALSE, warning=FALSE}
main_figure <- ggarrange(f1, 
                         ggarrange(f6, f7, widths = c(2,2),
                                   ncol = 2, labels = c("B", "C")),
                         nrow = 2, 
                         labels ="A",
                         heights = c(1, 0.75),
                         common.legend = TRUE)
#                    legend = "top")

main_figure

#plot<- ggarrange(ba,mi,fa, ncol=3, nrow=1, common.legend = TRUE,legend="bottom")

main_figure <- annotate_figure(main_figure, top = text_grob("Experiment controlled vs unknwon environment", 
                                      color = "black", face = "bold", size = 12))
```

## Analisis de coeficientes

```{r load_coeficient_data, echo=FALSE}

data.clean <-  read.csv('../data/coeficientes_por_sujeto_sin_outliers.csv', header = TRUE, sep = ' ', stringsAsFactors = TRUE)

```

### Coeficient a (non linear compression)

```{r coeficient_a, echo=FALSE, warning=FALSE, message=FALSE}
data.clean.controlled <- data.clean %>%
  filter(room_condition == "Controlled environment")

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g (%.2g - %.2g)\nN =  %.2g",
  mean(data.clean.controlled$coef),
  sd(data.clean.controlled$coef),
  median(data.clean.controlled$coef),
  quantile(data.clean.controlled$coef)[4],
  quantile(data.clean.controlled$coef)[2],
  sum(data.clean.controlled$coef)
)

hist_a_sc <- ggplot(data.clean.controlled, aes(coef)) +
  geom_histogram(binwidth= 0.1, color="black",fill="white") +
  scale_x_continuous(breaks= seq(-0.5,2.1, by=0.5)) +
  scale_y_continuous(breaks= seq(0,8, by = 1))+
  xlim(0.3,2.1) +
  ylim(0,8) +
  geom_vline(xintercept = round(mean(data.clean.controlled$coef),2),        # Add line for mean
             linetype="dashed",
  ) +
  annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.4, # para fig compuesta
           y = 4.0,
           label = eqn1,
           size = 1.5,
           hjust = 0) +
  labs(x="a", y = "Count")+
  theme(
    legend.position="none",
    #axis.line = element_blank(),
    axis.title.x = element_blank(),
    #axis.ticks = element_blank(),
    axis.title.y = element_blank()) +
  theme_minimal()

#hist_a_sc

# sala grande

data.clean.unknown <- data.clean %>%
  filter(room_condition == "Unknown environment")

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g (%.2g - %.2g)\nN =  %.2g",
  mean(data.clean.unknown$coef),
  sd(data.clean.unknown$coef),
  median(data.clean.unknown$coef),
  quantile(data.clean.unknown$coef)[4],
  quantile(data.clean.unknown$coef)[2],
  sum(data.clean.unknown$coef)
)


# scale_x_continuous(breaks= seq(0.3,2.1, by=0.5)) +
#   scale_y_continuous(breaks= seq(0,5, by = 1))+
#   xlim(0.3,2) +
#   ylim(0,5) +

hist_a_sg <- ggplot(data.clean.unknown, aes(coef)) +
  geom_histogram(binwidth= 0.1, color="black",fill="white") +
  geom_vline(xintercept = round(mean(data.clean.unknown$coef),2),        # Add line for mean
             linetype="dashed",
  ) +
  scale_x_continuous(breaks= seq(-0.5,2.1, by=0.5)) +
  scale_y_continuous(breaks= seq(0,8, by = 1))+
  xlim(0.3,2.1) +
  ylim(0,8) +
  annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.4, # para fig compuesta
           y = 4.0,
           label = eqn1,
           size = 1.5,
           hjust = 0) +
  labs(x="a", y = "Count")+
  theme(
    legend.position="none",
    #axis.line = element_blank(),
    axis.title.x = element_blank(),
    #axis.ticks = element_blank(),
    axis.title.y = element_blank()) +
  theme_minimal()

#hist_a_sg

# a_comp <- ggarrange(
#   hist_a_sc,
#   hist_a_sg,
#   nrow = 2
# )

#plot(a_comp)

# histograma a apaisado
data.clean.boxplot_a <- data.clean %>%
  mutate(
    room_condition = case_when(
      room_condition == "Controlled environment" ~ "Controlled",
      room_condition == "Unknown environment" ~ "Unknown",
    )
  )

bxp <- ggboxplot(data.clean.boxplot_a, x = "room_condition", y = "coef",
                 orientation = "horizontal",
                 color = "room_condition", palette = "jco",
                 add = "jitter", ylab="coef a",
                 title="T-test coeficientes a") +
  theme_minimal() +
  theme(
    legend.position="none",
    #axis.line = element_blank(),
    axis.title.x = element_blank(),
    #axis.title = element_text(hjust = 0),
    #axis.ticks = element_blank(),
    axis.title.y = element_blank())


stat.test <- data.clean.boxplot_a  %>% 
  t_test(coef~room_condition) %>%
  add_significance()

stat.test <- stat.test %>% add_y_position(fun ="mean", step.increase = 3)

bxp <- bxp + stat_pvalue_manual(
  stat.test, label = "p", tip.length = 0.01,
  coord.flip = TRUE
) +
  coord_flip()

#bxp

all <- ggarrange(
  bxp,
  ggarrange(
    hist_a_sc, 
    hist_a_sg,
    nrow = 2
  ),
  ncol = 2
)

all

```

### Intercept k

```{r coeficient_k, echo=FALSE, warning=FALSE, message=FALSE}
data.clean.controlled <- data.clean %>%
  filter(room_condition == "Controlled environment")

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g (%.2g - %.2g)\nN =  %.2g",
  mean(data.clean.controlled$intercept),
  sd(data.clean.controlled$intercept),
  median(data.clean.controlled$intercept),
  quantile(data.clean.controlled$intercept)[4],
  quantile(data.clean.controlled$intercept)[2],
  sum(data.clean.controlled$intercept)
)

hist_a_sc <- ggplot(data.clean.controlled, aes(intercept)) +
  geom_histogram(binwidth= 0.1, color="black",fill="white") +
  scale_x_continuous(breaks= seq(-1,2.1, by=0.5)) +
  scale_y_continuous(breaks= seq(0,7, by = 1))+
  xlim(-1,2.1) +
  ylim(0,7) +
  geom_vline(xintercept = round(mean(data.clean.controlled$intercept),2),        # Add line for mean
             linetype="dashed",
  ) +
  annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.4, # para fig compuesta
           y = 4.0,
           label = eqn1,
           size = 1.5,
           hjust = 0) +
  labs(x="k", y = "Count")+
  theme(
    legend.position="none",
    #axis.line = element_blank(),
    axis.title.x = element_blank(),
    #axis.ticks = element_blank(),
    axis.title.y = element_blank()) +
  theme_minimal()

#hist_a_sc

# sala grande

data.clean.unknown <- data.clean %>%
  filter(room_condition == "Unknown environment")

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g (%.2g - %.2g)\nN =  %.2g",
  mean(data.clean.unknown$intercept),
  sd(data.clean.unknown$intercept),
  median(data.clean.unknown$intercept),
  quantile(data.clean.unknown$intercept)[4],
  quantile(data.clean.unknown$intercept)[2],
  sum(data.clean.unknown$intercept)
)


# scale_x_continuous(breaks= seq(0.3,2.1, by=0.5)) +
#   scale_y_continuous(breaks= seq(0,5, by = 1))+
#   xlim(0.3,2) +
#   ylim(0,5) +

hist_a_sg <- ggplot(data.clean.unknown, aes(intercept)) +
  geom_histogram(binwidth= 0.1, color="black",fill="white") +
  geom_vline(xintercept = round(mean(data.clean.unknown$intercept),2),        # Add line for mean
             linetype="dashed",
  ) +
  scale_x_continuous(breaks= seq(-1,2.1, by=0.5)) +
  scale_y_continuous(breaks= seq(0,7, by = 1))+
  xlim(-1,2.1) +
  ylim(0,7) +
  annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.4, # para fig compuesta
           y = 4.0,
           label = eqn1,
           size = 1.5,
           hjust = 0) +
  labs(x="k", y = "Count")+
  theme(
    legend.position="none",
    #axis.line = element_blank(),
    axis.title.x = element_blank(),
    #axis.ticks = element_blank(),
    axis.title.y = element_blank()) +
  theme_minimal()

#hist_a_sg

# a_comp <- ggarrange(
#   hist_a_sc,
#   hist_a_sg,
#   nrow = 2
# )

#plot(a_comp)

# histograma a apaisado
data.clean.boxplot_k <- data.clean %>%
  mutate(
    room_condition = case_when(
      room_condition == "Controlled environment" ~ "Controlled",
      room_condition == "Unknown environment" ~ "Unknown",
    )
  )

bxp <- ggboxplot(data.clean.boxplot_k, x = "room_condition", y = "intercept",
                 orientation = "horizontal",
                 color = "room_condition", palette = "jco",
                 add = "jitter", ylab="k",
                 title="T-test k") +
  theme_minimal() +
  theme(
    legend.position="none",
    #axis.line = element_blank(),
    axis.title.x = element_blank(),
    #axis.title = element_text(hjust = 0),
    #axis.ticks = element_blank(),
    axis.title.y = element_blank())


stat.test <- data.clean.boxplot_k  %>% 
  t_test(intercept~room_condition) %>%
  add_significance()

stat.test <- stat.test %>% add_y_position(fun ="mean", step.increase = 3)

bxp <- bxp + stat_pvalue_manual(
  stat.test, label = "p", tip.length = 0.01,
  coord.flip = TRUE
) +
  coord_flip()

#bxp

all <- ggarrange(
  bxp,
  ggarrange(
    hist_a_sc, 
    hist_a_sg,
    nrow = 2
  ),
  ncol = 2
)

all
```